import streamlit as st
import hashlib
import requests
import pandas as pd
import os

# Function to securely hash passwords
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# Initialize session state variables
if 'logged_in' not in st.session_state:
    st.session_state['logged_in'] = False
if 'username' not in st.session_state:
    st.session_state['username'] = None
if 'user_data' not in st.session_state:
    st.session_state['user_data'] = {}  # Use session state for user data

# Function to handle user registration
def register():
    st.subheader("Register")
    username = st.text_input("Username", key="register_username")
    email = st.text_input("Email", key="register_email")
    password = st.text_input("Password", type="password", key="register_password")
    confirm_password = st.text_input("Confirm Password", type="password", key="confirm_password")

    if st.button("Register"):
        if not username or not email or not password:
            st.warning("Please fill in all the fields.")
        elif username in st.session_state['user_data']:
            st.warning("Username already exists!")
        elif password != confirm_password:
            st.warning("Passwords do not match!")
        else:
            st.session_state['user_data'][username] = {
                "email": email,
                "password": hash_password(password),
            }
            st.success("Registration successful! You can now log in.")

# Function to handle user login
def login():
    st.subheader("Login")
    # Skipping the username and password input, always authenticate the user
    if st.button("Login"):
        st.session_state['logged_in'] = True
        st.session_state['username'] = "default_user"
        st.success("Logged in successfully as default_user.")

# Function to handle user logout
def logout():
    st.session_state['logged_in'] = False
    st.session_state['username'] = None
    st.info("You have logged out.")

# Function to display user details
def user_details():
    username = st.session_state['username']
    if username:
        st.subheader("User Details")
        st.write(f"Username: {username}")
        st.write(f"Email: {st.session_state['user_data'].get(username, {}).get('email', 'N/A')}")

# Function to fetch and display market data
def fetch_market_data():
    st.subheader("Market Data")
    api_key = os.getenv("ALPHAVANTAGE_API_KEY", "XGGBQFHKV1HUKK4K")
    base_url = "https://www.alphavantage.co/query"

    symbol = st.text_input("Enter stock symbol (e.g., AAPL)", value="AAPL")
    if st.button("Fetch Data"):
        params = {
            "function": "TIME_SERIES_DAILY",
            "symbol": symbol,
            "outputsize": "compact",
            "apikey": api_key
        }
        try:
            response = requests.get(base_url, params=params)
            if response.status_code != 200:
                st.error(f"API error: {response.status_code}")
                return

            data = response.json()
            if "Error Message" in data or "Time Series (Daily)" not in data:
                st.error("Error with API key or symbol. Please check your inputs.")
                return

            time_series = data["Time Series (Daily)"]
            df = pd.DataFrame.from_dict(time_series, orient="index")
            df = df.rename(columns={
                "1. open": "Open",
                "2. high": "High",
                "3. low": "Low",
                "4. close": "Close",
                "5. volume": "Volume"
            })
            df.index = pd.to_datetime(df.index)
            df = df.sort_index()

            st.write("### Daily Stock Prices")
            st.dataframe(df.head(20))
            st.line_chart(df["Close"].astype(float))
        except requests.exceptions.RequestException as e:
            st.error(f"Error fetching data: {e}")

# Function to generate custom reports
def generate_custom_report():
    st.subheader("Generate Custom Reports")
    start_date = st.date_input("Start Date")
    end_date = st.date_input("End Date")
    min_volume = st.number_input("Minimum Volume", value=1000000, step=10000)
    symbol = st.text_input("Enter stock symbol for the report (e.g., AAPL)", value="AAPL")

    if st.button("Generate Report"):
        try:
            api_key = os.getenv("ALPHAVANTAGE_API_KEY", "XGGBQFHKV1HUKK4K")
            base_url = "https://www.alphavantage.co/query"
            params = {
                "function": "TIME_SERIES_DAILY",
                "symbol": symbol,
                "outputsize": "full",
                "apikey": api_key
            }
            response = requests.get(base_url, params=params)
            if response.status_code != 200:
                st.error(f"API error: {response.status_code}")
                return

            data = response.json()
            if "Time Series (Daily)" not in data:
                st.error("API response doesn't contain expected data. Check your symbol or API key.")
                return

            time_series = data["Time Series (Daily)"]
            df = pd.DataFrame.from_dict(time_series, orient="index")
            df = df.rename(columns={
                "1. open": "Open",
                "2. high": "High",
                "3. low": "Low",
                "4. close": "Close",
                "5. volume": "Volume"
            })
            df.index = pd.to_datetime(df.index)
            df = df.sort_index()

            # Filter by date range and volume
            filtered_df = df[(df.index >= pd.Timestamp(start_date)) & 
                             (df.index <= pd.Timestamp(end_date)) & 
                             (pd.to_numeric(df["Volume"], errors='coerce') >= min_volume)]

            st.write("### Custom Report")
            st.dataframe(filtered_df)
            csv = filtered_df.to_csv().encode("utf-8")
            st.download_button("Download CSV", data=csv, file_name="custom_report.csv", mime="text/csv")
        except requests.exceptions.RequestException as e:
            st.error(f"Error fetching data: {e}")

# Function to compare multiple stocks
def compare_stocks():
    st.subheader("Compare Stock Prices")
    symbols = st.text_input("Enter stock symbols (comma separated, e.g., AAPL, MSFT, GOOG)", value="AAPL, MSFT, GOOG")
    symbols_list = [s.strip() for s in symbols.split(",")]

    if st.button("Compare Stocks"):
        all_data = {}
        api_key = os.getenv("ALPHAVANTAGE_API_KEY", "XGGBQFHKV1HUKK4K")
        base_url = "https://www.alphavantage.co/query"
        for symbol in symbols_list:
            params = {
                "function": "TIME_SERIES_DAILY",
                "symbol": symbol,
                "outputsize": "compact",
                "apikey": api_key
            }
            try:
                response = requests.get(base_url, params=params)
                if response.status_code != 200:
                    st.error(f"API error for {symbol}: {response.status_code}")
                    continue

                data = response.json()
                if "Error Message" in data or "Time Series (Daily)" not in data:
                    st.error(f"Error with API key or symbol for {symbol}. Please check your inputs.")
                    continue

                time_series = data["Time Series (Daily)"]
                df = pd.DataFrame.from_dict(time_series, orient="index")
                df = df.rename(columns={
                    "1. open": "Open",
                    "2. high": "High",
                    "3. low": "Low",
                    "4. close": "Close",
                    "5. volume": "Volume"
                })
                df.index = pd.to_datetime(df.index)
                df = df.sort_index()

                all_data[symbol] = df["Close"].astype(float)
            except requests.exceptions.RequestException as e:
                st.error(f"Error fetching data for {symbol}: {e}")

        if all_data:
            combined_df = pd.DataFrame(all_data)
            st.write("### Stock Price Comparison")
            st.dataframe(combined_df.head(20))
            st.line_chart(combined_df)

# Main App Logic
st.title("Stock Market Analysis App")

if 'username' not in st.session_state:
    st.session_state['username'] = "default_user"
    st.session_state['logged_in'] = True  # Automatically login as default_user for testing

if not st.session_state['logged_in']:
    st.sidebar.title("Account")
    option = st.sidebar.selectbox("Login or Register", ("Login", "Register"))
    if option == "Login":
        login()
    elif option == "Register":
        register()
else:
    st.sidebar.title("Navigation")
    option = st.sidebar.selectbox("Menu", ("User Details", "Market Data", "Custom Reports", "Stock Comparison", "Logout"))

    if option == "User Details":
        user_details()
    elif option == "Market Data":
        fetch_market_data()
    elif option == "Custom Reports":
        generate_custom_report()
    elif option == "Stock Comparison":
        compare_stocks()
    elif option == "Logout":
        logout()
